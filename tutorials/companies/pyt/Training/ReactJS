ReactJS

- Why React - Light weight Library to Render UI/View
- Benefits of React - Used for single page applications
- Demerits - No standard to follow
- Unidirectional flow - Parent data cannot be modified
- Source of truth

JSX
- HTML in JavaScript

Babel
- converts ES6/JSX code to ES5 code

Components
- class 
	- stateful
	- change state dynamically
	- use setState method
	- bind functions using bind method or use arrow functions
- functional 
	- stateless

Lifecycle
- Initialization 
	- constructor - setup props and state
- Mounting 
	- componentWillMount (deprecated)
	- render
	- componentDidMount
- Updating
	- props and states
		- getDerivedStateFromProps
		- shouldComponentUpdate
		- componentWillUpdate (deprecated)
		- render
		- componentDidUpdate
- Unmounting
	- componentWillUnmount

Conditional Rendering
- render React component based on condition

Destroy component
- return null or undefined in render function
- it will call componentWillUnmount

Rerender component forcefully
- forceUpdate API

State 
- required for dynamic interaction, real time update of data

React devtools
- for debugging states in React applications
- it is a chrome extension

Redux
- single place/central store for state management
- single source of truth
- read-only/immutable data
- store only common/sharable data across components

Redux usage
- import modules createStore from redux and Provider from react-redux
- createStore to create and initialize store
- set Provider component as root DOM of App and pass store to Provider
- import module connect from react-redux to bind component to redux
- export default connect()(Component) - to bind component
- import combineReducers module from redux
- use it to combine multiple reducers

Redux functions
- dispatch -> action function -> reducer (update store)
- pass action type to dispatch, which inturn calls reducer function with state and action type
- reducer - function that accepts state and action and return new state
- use mapStateToProps function to extract data required for component from global store 
- use mapDispatchToProps function to set actions which component needs to dispatch

Exercise
1. Two input fields - second field = first field * 10; first field = second field / 10;
- update second field on change of first input field
- update first field on change of second input field
- allow only numbers
- Render using single component
- Do this using Redux
- write unit test cases
2. Create a route /assign-<name> and load component
- create Loadable component - add path of file
- create a folder at the location of Faq component
- create a component in that folder
- access redux store in the component and retrieve app.device variable
- create label in the page pre-filled with app.device
- create another input box that accepts some value
- create button and on click update label and redux store

Unit testing
- Jest JS
- use snapshots for static pages
- enzyme
- chai - BDD
- sinon - functional/event testing
